// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: proto/v1/billing_engine.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BillingEngineClient is the client API for BillingEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillingEngineClient interface {
	// CreateLoan creates a new loan for a user.
	CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*Loan, error)
	// GetCurrentLoan retrieves the current loan details for a user.
	GetCurrentLoan(ctx context.Context, in *GetCurrentLoanRequest, opts ...grpc.CallOption) (*LoanDetail, error)
	// MakePayment processes a payment for a specific loan.
	MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*LoanDetail, error)
}

type billingEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewBillingEngineClient(cc grpc.ClientConnInterface) BillingEngineClient {
	return &billingEngineClient{cc}
}

func (c *billingEngineClient) CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*Loan, error) {
	out := new(Loan)
	err := c.cc.Invoke(ctx, "/loan_service.v1.BillingEngine/CreateLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingEngineClient) GetCurrentLoan(ctx context.Context, in *GetCurrentLoanRequest, opts ...grpc.CallOption) (*LoanDetail, error) {
	out := new(LoanDetail)
	err := c.cc.Invoke(ctx, "/loan_service.v1.BillingEngine/GetCurrentLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billingEngineClient) MakePayment(ctx context.Context, in *MakePaymentRequest, opts ...grpc.CallOption) (*LoanDetail, error) {
	out := new(LoanDetail)
	err := c.cc.Invoke(ctx, "/loan_service.v1.BillingEngine/MakePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillingEngineServer is the server API for BillingEngine service.
// All implementations must embed UnimplementedBillingEngineServer
// for forward compatibility
type BillingEngineServer interface {
	// CreateLoan creates a new loan for a user.
	CreateLoan(context.Context, *CreateLoanRequest) (*Loan, error)
	// GetCurrentLoan retrieves the current loan details for a user.
	GetCurrentLoan(context.Context, *GetCurrentLoanRequest) (*LoanDetail, error)
	// MakePayment processes a payment for a specific loan.
	MakePayment(context.Context, *MakePaymentRequest) (*LoanDetail, error)
	mustEmbedUnimplementedBillingEngineServer()
}

// UnimplementedBillingEngineServer must be embedded to have forward compatible implementations.
type UnimplementedBillingEngineServer struct {
}

func (UnimplementedBillingEngineServer) CreateLoan(context.Context, *CreateLoanRequest) (*Loan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedBillingEngineServer) GetCurrentLoan(context.Context, *GetCurrentLoanRequest) (*LoanDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentLoan not implemented")
}
func (UnimplementedBillingEngineServer) MakePayment(context.Context, *MakePaymentRequest) (*LoanDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakePayment not implemented")
}
func (UnimplementedBillingEngineServer) mustEmbedUnimplementedBillingEngineServer() {}

// UnsafeBillingEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillingEngineServer will
// result in compilation errors.
type UnsafeBillingEngineServer interface {
	mustEmbedUnimplementedBillingEngineServer()
}

func RegisterBillingEngineServer(s grpc.ServiceRegistrar, srv BillingEngineServer) {
	s.RegisterService(&BillingEngine_ServiceDesc, srv)
}

func _BillingEngine_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingEngineServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan_service.v1.BillingEngine/CreateLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingEngineServer).CreateLoan(ctx, req.(*CreateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingEngine_GetCurrentLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrentLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingEngineServer).GetCurrentLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan_service.v1.BillingEngine/GetCurrentLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingEngineServer).GetCurrentLoan(ctx, req.(*GetCurrentLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillingEngine_MakePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillingEngineServer).MakePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/loan_service.v1.BillingEngine/MakePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillingEngineServer).MakePayment(ctx, req.(*MakePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BillingEngine_ServiceDesc is the grpc.ServiceDesc for BillingEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BillingEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loan_service.v1.BillingEngine",
	HandlerType: (*BillingEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoan",
			Handler:    _BillingEngine_CreateLoan_Handler,
		},
		{
			MethodName: "GetCurrentLoan",
			Handler:    _BillingEngine_GetCurrentLoan_Handler,
		},
		{
			MethodName: "MakePayment",
			Handler:    _BillingEngine_MakePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/billing_engine.proto",
}
